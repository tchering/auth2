<%# app/views/users/new.html.erb %>
<style>
  .form-container {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }
  .form-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 30px rgba(0, 0, 0, 0.2);
  }
  .form-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    text-align: center;
    font-size: 24px;
    font-weight: bold;
  }
  .form-body {
    padding: 40px;
  }
  .form-control {
    border: none;
    border-radius: 20px;
    padding: 12px 20px;
    background-color: #f8f9fa;
    transition: all 0.3s ease;
  }
  .form-control:focus {
    box-shadow: 0 0 0 2px #667eea;
  }
  .btn-signup {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 20px;
    padding: 12px 20px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all 0.3s ease;
  }
  .btn-signup:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
  }
  .error-message {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }
  .server-errors {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 10px;
    color: #721c24;
    padding: 15px;
    margin-bottom: 20px;
  }
  .server-errors ul {
    margin-bottom: 0;
    padding-left: 20px;
  }
</style>
<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="form-container">
        <div class="form-header">
          Sign Up
        </div>
        <div class="form-body">
          <% if @user.errors.any? %>
            <div id="error_explanation" class="server-errors">
              <ul>
                <% @user.errors.full_messages.each do |message| %>
                  <li><%= message %></li>
                <% end %>
              </ul>
            </div>
          <% end %>
          <%= form_with(model: @user, local: true, html: { id: 'signup-form' }) do |f| %>
            <div class="form-group">
              <%= f.text_field :username, class: 'form-control', placeholder: 'Username' %>
              <div class="error-message" id="username-error"></div>
            </div>
            <div class="form-group">
              <%= f.email_field :email, class: 'form-control', placeholder: 'Email' %>
              <div class="error-message" id="email-error"></div>
            </div>
            <div class="form-group">
              <%= f.password_field :password, class: 'form-control', placeholder: 'Password' %>
              <div class="error-message" id="password-error"></div>
            </div>
            <div class="form-group">
              <%= f.password_field :password_confirmation, class: 'form-control', placeholder: 'Confirm Password' %>
              <div class="error-message" id="password-confirmation-error"></div>
            </div>
            <div class="form-group">
              <%= f.select :role, options_for_select([['User', 'user'], ['Editor', 'editor'], ['Admin', 'admin']], selected: 'user'), {}, { class: 'form-control' } %>
            </div>
            <%= f.submit 'Sign Up', class: 'btn btn-primary btn-block btn-signup', data: { disable_with: 'Signing up...' } %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('signup-form');
    const username = document.getElementById('user_username');
    const email = document.getElementById('user_email');
    const password = document.getElementById('user_password');
    const passwordConfirmation = document.getElementById('user_password_confirmation');
    const serverErrors = document.getElementById('error_explanation');

    function setErrorFor(input, message) {
      const errorElement = document.getElementById(`${input.id.replace('user_', '')}-error`);
      errorElement.innerText = message;
    }

    function clearError(input) {
      const errorElement = document.getElementById(`${input.id.replace('user_', '')}-error`);
      errorElement.innerText = '';
    }

    function validateUsername() {
      if (username.value.trim() === '') {
        setErrorFor(username, 'Username cannot be blank');
        return false;
      } else if (username.value.length < 3) {
        setErrorFor(username, 'Username must be at least 3 characters long');
        return false;
      } else {
        clearError(username);
        return true;
      }
    }

    function validateEmail() {
      const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      if (email.value.trim() === '') {
        setErrorFor(email, 'Email cannot be blank');
        return false;
      } else if (!re.test(email.value.toLowerCase())) {
        setErrorFor(email, 'Please enter a valid email address');
        return false;
      } else {
        clearError(email);
        return true;
      }
    }

    function validatePassword() {
      if (password.value.trim() === '') {
        setErrorFor(password, 'Password cannot be blank');
        return false;
      } else if (password.value.length < 6) {
        setErrorFor(password, 'Password must be at least 6 characters long');
        return false;
      } else {
        clearError(password);
        return true;
      }
    }

    function validatePasswordConfirmation() {
      if (passwordConfirmation.value.trim() === '') {
        setErrorFor(passwordConfirmation, 'Please confirm your password');
        return false;
      } else if (password.value !== passwordConfirmation.value) {
        setErrorFor(passwordConfirmation, 'Passwords do not match');
        return false;
      } else {
        clearError(passwordConfirmation);
        return true;
      }
    }

    function clearServerErrors() {
      if (serverErrors) {
        serverErrors.style.display = 'none';
      }
    }

    function validateField(field, validationFunction) {
      field.addEventListener('input', function() {
        validationFunction(); // Validate the field on input
        clearServerErrors(); // Clear server errors on any input
      });
    }

    // Attach real-time validation
    validateField(username, validateUsername);
    validateField(email, validateEmail);
    validateField(password, function() {
      validatePassword();
      validatePasswordConfirmation();
    });
    validateField(passwordConfirmation, validatePasswordConfirmation);

    // Prevent form submission if there are errors
    form.addEventListener('submit', function(e) {
      const isUsernameValid = validateUsername();
      const isEmailValid = validateEmail();
      const isPasswordValid = validatePassword();
      const isPasswordConfirmationValid = validatePasswordConfirmation();

      if (!(isUsernameValid && isEmailValid && isPasswordValid && isPasswordConfirmationValid)) {
        e.preventDefault(); // Prevent form submission if there are errors
      }
    });
  });
</script>
